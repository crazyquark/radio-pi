#{
-- 
local base_url = 'http://recorder.example.com/'
local function date_rfc_822(time)
	if not time then time = os.time() end
	return os.date('%a, %d %b %Y %H:%M:%S %z', time)
end
local to_xml = rec.escape_xml

local function my_url_escape(str)
	local tt = {[' '] = '%20',}
    return string.gsub(str, '[ ]', tt)
end

function url_escape(s)
    return string.gsub(s, "([^A-Za-z0-9_%./:-])", function(c)
        return string.format("%%%02x", string.byte(c))
    end)
end

local to_uri = url_escape
-- local to_uri = rec.escape_xml	-- TODO!

 }<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <link>#{= to_uri(table.concat{base_url, 'podcasts/', podcast.name, '.rss'}) }</link>
    <atom:link href="#{= to_uri(table.concat{base_url, 'podcasts/', podcast.name, '.rss'}) }" rel="self" type="application/rss+xml" />
    <title>Rec2013 #{= podcast.title }</title>
    <itunes:subtitle>#{= podcast.subtitle }</itunes:subtitle>
    <description></description>
    <itunes:summary></itunes:summary>
    <image>
      <link>#{= to_uri(table.concat{base_url, 'podcasts/', podcast.name, '.rss'}) }</link>
      <title>Rec2013 #{= podcast.title }</title>
      <url>http://www.br.de/radio/bayern2/service/moderation/moderatoren-bayern2-quiz108~_v-image256_-a42a29b6703dc477fd0848bc845b8be5c48c1667.jpg?version=1347970118194</url>
    </image>
    <itunes:image href="http://www.br.de/radio/bayern2/service/moderation/moderatoren-bayern2-quiz108~_v-image256_-a42a29b6703dc477fd0848bc845b8be5c48c1667.jpg?version=1347970118194"/>
    <itunes:explicit>no</itunes:explicit>
    <language>de</language>
    <lastBuildDate>#{= date_rfc_822() }</lastBuildDate>
    <pubDate>#{= date_rfc_822() }</pubDate>
#{	-- sort reverse, newest first:
	for _,bc in ipairs(podcast:broadcasts(function(a,b) return a.file_html > b.file_html end)) do 
		io.stderr:write('add episode ', bc.file_html, '\n')
		local meta = assert(bc:read_meta())
		local start = assert(parse_iso8601(meta.DC_format_timestart))
		local end_ = assert(parse_iso8601(meta.DC_format_timeend))
 }    <item>
      <title>#{= to_xml(meta.DC_title) }</title>
      <itunes:subtitle>#{= to_xml(meta.DC_title_episode) }</itunes:subtitle>
      <description>#{= to_xml(meta.DC_description) }</description>
      <itunes:image href="#{= to_uri(meta.DC_image) }"/>
      <pubDate>#{= date_rfc_822(start) }</pubDate>
      <guid isPermaLink="true">#{= to_uri(table.concat{base_url, bc.file_html}) }</guid>
      <itunes:duration>#{= os.difftime(end_,start) }</itunes:duration>
      <itunes:explicit>clean</itunes:explicit>
      <itunes:author>#{= to_xml(meta.DC_creator) }</itunes:author>
      <link>#{= to_uri(table.concat{base_url, bc.file_html}) }</link>
#{ if 'mp3' == bc:enclosure_state() then
		local file_size = lfs.attributes(table.concat{'enclosures', '/', bc.day_dir, '/', bc.base, '.mp3'}, 'size')
 }      <enclosure type="audio/mpeg" url="#{= to_uri(table.concat{base_url, 'enclosures', '/', bc.day_dir, '/', bc.base, '.mp3'}) }" length="#{= file_size }"/>
#{ end }    </item>
#{ end }  </channel>
</rss>
