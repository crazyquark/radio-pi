#{

local function date_rfc_822(time)
    if not time then time = os.time() end
    return os.date('%a, %d %b %Y %H:%M:%S %z', time)
end

assert(podcast, 'podcast')
assert(podcast.id, 'podcast id')

-- sort reverse, newest first:
local bcs = podcast:broadcasts(function(a,b) return a.id > b.id end)

local bc_most_recent = nil
for _,bc in ipairs(bcs) do
    if 'file' == lfs.attributes(bc:enclosure():filename('mp3'), 'mode') then
        bc_most_recent = bc
        break
    end
end

 }<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <link>#{= podcast:url('rss') }</link>
    <atom:link href="#{= podcast:url('rss') }" rel="self" type="application/rss+xml" />
    <title>Rec2013 #{= podcast.title }</title>
    <itunes:subtitle>#{= podcast.subtitle }</itunes:subtitle>
    <description></description>
    <itunes:summary></itunes:summary>
#{  if bc_most_recent and bc_most_recent:pbmi().DC_image then }    <!-- image of most recent enclosure -->
    <image>
      <link>#{= podcast:url('rss') }</link>
      <title>Rec2013 #{= podcast.title }</title>
      <url>#{= bc_most_recent:pbmi().DC_image }</url>
    </image>
    <itunes:image href="#{= bc_most_recent:pbmi().DC_image }"/>
#{ end }    <itunes:explicit>no</itunes:explicit>
    <language>de</language>
    <lastBuildDate>#{= date_rfc_822() }</lastBuildDate>
    <pubDate>#{= date_rfc_822() }</pubDate>
#{
    for _,bc in ipairs(bcs) do
        local start = assert(bc:dtstart())
        local end_ = assert(bc:dtend())
 }    <item>
      <title>#{= bc:pbmi().DC_title:escape_xml() }</title>
      <itunes:subtitle>#{= bc:pbmi().DC_title_episode:escape_xml() }</itunes:subtitle>
      <description>#{= bc:pbmi().DC_description:escape_xml() }</description>
      <itunes:image href="#{= bc:pbmi().DC_image }"/>
      <pubDate>#{= date_rfc_822(start) }</pubDate>
      <guid isPermaLink="true">#{= bc:url('xml') }</guid>
      <itunes:duration>#{= os.difftime(end_,start) }</itunes:duration>
      <itunes:explicit>clean</itunes:explicit>
      <itunes:author>#{= bc:pbmi().DC_creator:escape_xml() }</itunes:author>
      <link>#{= bc:url('xml') }</link>
#{ if 'mp3' == bc:enclosure().state then
        local file_size = lfs.attributes(bc:enclosure():filename('mp3'), 'size')
 }      <enclosure type="audio/mpeg" url="#{= bc:enclosure():url('mp3') }" length="#{= file_size }"/>
#{ end }    </item>
#{ end }  </channel>
</rss>
