#
# radio-pi lighttpd configuration
# /usr/share/doc/lighttpd/configuration.txt.gz
#

var.baseurl = "/"
var.auth_realm = "Radio Pi"
var.auth_method = "digest"

# for legal reasons mp3 access must be restricted, http://de.wikipedia.org/wiki/Privatkopie#Deutschland :
auth.backend        = "htdigest"
auth.backend.htdigest.userfile  = "/etc/lighttpd/radio-pi.user.htdigest"
# Allow HEAD requests (on mp3)
$HTTP["request-method"] !~ "^(HEAD)$" {
    auth.require = ( baseurl + "enclosures" => (
        # see /usr/share/doc/lighttpd/authentication.txt.gz
        "method"  => auth_method,
        "realm"   => auth_realm,
        "require" => "valid-user",
    ), )
}
# Workaround for Apples iOS 'Podcast' app:
# Restrict *.rss because of trouble with per-enclosure auth. So we enforce the same policy
# for mp3 AND rss.
# CAUTION: subscribing the podcast ONLY works with username + password as part of the feed url,
# like http://myuser:mypwd@recorder.example.com/podcasts/zuendfunk.rss
# Stupid, but what else can we do?
$HTTP["useragent"] =~ "^Podcasts/" {
    $HTTP["url"] =~ "\.rss$" {
        # http://redmine.lighttpd.net/projects/1/wiki/Docs_ModAuth
        # http://www.cyberciti.biz/tips/howto-lighttpd-block-useragent.html
        auth.require = ( "" => (
            # see /usr/share/doc/lighttpd/authentication.txt.gz
            "method"  => auth_method,
            "realm"   => auth_realm,
            "require" => "valid-user",
        ), )
    }
}

# enable directory browsing:
dir-listing.activate    = "enable"
dir-listing.show-readme = "enable"

# register lua cgi handler:
static-file.exclude-extensions = ( )
cgi.assign = ( ".lua" => "/usr/bin/lua",)

# recommended: some convenience redirects (internal):
url.rewrite-once = (
    # legacy: podcast ics + rss
    "^(" + baseurl + "podcasts)/([^\/]*)\.(ics|rss)$" => "$1/$2/broadcasts.$3",
    # consistency: station ics:
    "^(" + baseurl + "stations)/([^\/]*)\.(ics)$" => "$1/$2/broadcasts.$3",
)

# required, functional, redirects:
url.redirect = (
    # redirect 'now' to cgi:
    "^" + baseurl + "[^\/]*/([^\/]*)/now$" => "../../app/now.lua?station=$1",
    # redirect podcast episode markers to regular broadcast page:
    "^" + baseurl + "podcasts/[^/]+/([^/]+/[0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9].*\.xml)$" => baseurl + "stations/$1",
    # redirect unfinished enclosure markers to regular broadcast page:
    "^" + baseurl + "enclosures/([^/]+/[0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9].*)\.(pending|ripping|failed|purged)$" => baseurl + "stations/$1.xml",
    # legacy:
    "^" + baseurl + "[^\/]*/([^\/]*)/app/now\.lua$" => "../../../app/now.lua?station=$1",
    # as long as we don't have a proper index.html per day, just use the dir listing:
    "^(" + baseurl + "stations/[^/]*/[0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9]/)index.html$" => "$1",
)

# proper mimetypes + encodings:
mimetype.assign = (
    ".png"  => "image/png",
    ".xml"  => "text/xml; charset=utf-8",
    ".xslt" => "application/xslt+xml; charset=utf-8",
    ".json" => "application/json; charset=utf-8",
    ".js"   => "text/javascript; charset=utf-8",
    ".html" => "text/html; charset=utf-8",
    ".css"  => "text/css; charset=utf-8",
    ".txt"  => "text/plain; charset=utf-8",
    ".log"  => "text/plain; charset=utf-8",
    ".mp3"  => "audio/mpeg",
    ".rss"  => "application/rss+xml; charset=utf-8",
    ".ics"  => "text/calendar; charset=utf-8",
    ".cfg"  => "text/plain; charset=utf-8",
    ".rb"   => "text/plain; charset=utf-8",
    ".ico"  => "image/vnd.microsoft.icon",
    ".rdf"  => "application/rdf+xml; charset=utf-8",
    ".ttl"  => "text/turtle; charset=utf-8",
)

# bandwidth saving:
compress.filetype = (
    "application/xslt+xml",
    "application/json",
    "text/javascript",
    "text/html",
    "text/css",
    "text/plain",
    "application/rss+xml",
    "application/rdf+xml",
    "text/calendar",
    "text/turtle",
)

$HTTP["url"] =~ "\.(cfg|js|css|xslt|png|ico|mp3|ttl)$" {
     expire.url = ( "" => "access 24 hours" )
}
$HTTP["url"] =~ "change\.ttl$" {
     expire.url = ( "" => "modification 60 minutes" )
}
expire.url = ( "" => "access 2 minutes" )
