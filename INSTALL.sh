#!/bin/dash

git_repo="git://github.com/mro/radio-pi.git"
git_branch="develop"
www_base="/srv"

me=$(basename "$0")

RECORDER_DOMAIN="$1"

if [ "" = "$RECORDER_DOMAIN" ] ; then
    echo "installing radio-pi from $git_repo to /srv/<recorder.example.com>"
    read -p "Recorder domain (e.g. recorder.example.com): " RECORDER_DOMAIN
    echo "$RECORDER_DOMAIN"
    if [ "" = "$RECORDER_DOMAIN" ] ; then
        echo "no domain given, exiting..."
        exit 1
    fi

    recorder_base="$www_base/$RECORDER_DOMAIN"

    cd "$www_base"
    if [ $? -ne 0 ] ; then exit 2; fi
    echo "creating $recorder_base..."

    echo "grabbing git repo $git_repo ..."
    sudo apt-get install git-core
    if [ $? -ne 0 ] ; then
        echo "couldn't install git-core. Exiting..."
        exit 3
    fi

    if [ -d "$RECORDER_DOMAIN/.git" ] ; then
        echo "I'm not safe to be re-run for now. Exiting..."
        exit 4
        # cd "$RECORDER_DOMAIN"
        # sudo git pull
    else
        sudo git clone "$git_repo" "$RECORDER_DOMAIN"
        sudo chown -R "$USER:www-data" "$RECORDER_DOMAIN"
        cd "$RECORDER_DOMAIN"
        git checkout "$git_branch"
    fi
    if [ $? -ne 0 ] ; then
        echo "couldn't fetch git-repo. Exiting..."
        exit 5
    fi

    echo "handing over to $me from git..."
    dash "$me" "$RECORDER_DOMAIN"
    exit 0
else
    echo "Continue install for recorder domain '$RECORDER_DOMAIN'..."
fi

echo "Prerequisites - apt packages"
pkgs=""

### job scheduler cron + at:
    pkgs="$pkgs cron at"

### lighttpd (or just any web server to serve static files + simple CGIs + some convenience redirects):
    pkgs="$pkgs lighttpd lighttpd-doc"
    # user/password database:
    pkgs="$pkgs apache2-utils"

### ruby + nokogiri (the scraper):
    pkgs="$pkgs ruby ruby-dev libxml2-dev libxslt-dev"

### lua, luarocks, lfs:
    pkgs="$pkgs lua5.1 luarocks"

### streamripper:
    pkgs="$pkgs streamripper"

### id3tags:
    pkgs="$pkgs libtag1-dev"

echo "apt-get install $pkgs"
sudo apt-get install $pkgs
if [ $? -ne 0 ] ; then exit 6; fi

echo "prerequisites - configuration.."

read -p "Recorder username to create (for authenticated www mp3 access): " RECORDER_WWW_USER
if [ "" = "$RECORDER_WWW_USER" ] ; then
    echo "no username given, exiting..."
    echo "to rerun call"
    echo "    $ $0 $1"
    exit 7
fi

### job scheduler cron + at:

### lighttpd (or just any web server to serve static files + simple CGIs + some convenience redirects):
    sudo lighty-enable-mod accesslog auth cgi dir-listing simple-vhost
    # user/password database:
    sudo htdigest -c /etc/lighttpd/lighttpd.user.htdigest 'Recorder br radio' "$RECORDER_WWW_USER"

### ruby + nokogiri (the scraper):
    sudo gem install nokogiri

### lua, luarocks, lfs:
    sudo luarocks install luafilesystem

### streamripper:

### id3tags:
    sudo gem install taglib-ruby -v 0.4.0

sudo chown -R "www-data:www-data" "$www_base/$RECORDER_DOMAIN"
if [ $? -ne 0 ] ; then exit 8; fi
sudo chmod -R g+rw "$www_base/$RECORDER_DOMAIN"
sudo adduser "$USER" "www-data"

echo "http://$RECORDER_DOMAIN" > "$www_base/$RECORDER_DOMAIN/htdocs/app/base.url"
# if [ $? -ne 0 ] ; then exit 9; fi
# cd "$www_base/$RECORDER_DOMAIN"

sudo /etc/init.d/lighttpd force-reload

sudo -u www-data crontab -ri
if [ $? -ne 0 ] ; then exit 10; fi
sudo -u www-data crontab - <<END_OF_CRONTAB
# crontab generated by $0 from $git_repo branch $git_branch
RADIO_PI_CRON_DIR=$www_base/$RECORDER_DOMAIN/htdocs/app/cron
12 05  * * * /bin/dash "\$RADIO_PI_CRON_DIR/daily.sh"
55  *  * * * /bin/dash "\$RADIO_PI_CRON_DIR/hourly.sh"
*   *  * * * /bin/dash "\$RADIO_PI_CRON_DIR/minutely.sh"
10 */3 * * * /bin/dash "\$RADIO_PI_CRON_DIR/cleanup.sh"
END_OF_CRONTAB
sudo -u www-data crontab -l

echo "######################################################"
echo "Recorder install finished. For initial radio program website scrape call"
echo "    \$ sudo -u www-data $www_base/$RECORDER_DOMAIN/htdocs/app/cron/daily.sh"
